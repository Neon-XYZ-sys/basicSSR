class FrutopiaGame {
  constructor() {
    this.stageThresholds = [100, 500, 1000, 5000, 10000];
    this.currentStage = 1;
    this.currentProgress = 0;
    this.maxProgress = this.stageThresholds[this.currentStage - 1];
    this.availableWater = 0;
    this.waterPerSecond = 5;
    this.waterPerClick = 1;
    this.fruitsCollected = 0;
    this.maxStage = 5;
    this.currentFruitIndex = 0;
    this.maxWater = 10000;
    this.currentPage = "game";
    this.telegramId = null; 
    this.telegramWebApp = window.Telegram?.WebApp;

    this.stages = [
      { emoji: "üå∞", name: "–°–µ–º–µ—á–∫–∞" },
      { emoji: "üå±", name: "–†–æ—Å—Ç–æ–∫" },
      { emoji: "üåø", name: "–°–∞–∂–µ–Ω–µ—Ü" },
      { emoji: "üå≥", name: "–î–µ—Ä–µ–≤–æ" },
      { emoji: "üçé", name: "–ü–ª–æ–¥–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ" },
    ];

    this.fruits = [
      { emoji: "üçé", name: "–Ø–±–ª–æ–∫–æ", unlocked: false, collected: false },
      { emoji: "üçä", name: "–ê–ø–µ–ª—å—Å–∏–Ω", unlocked: false, collected: false },
      { emoji: "üçå", name: "–ë–∞–Ω–∞–Ω", unlocked: false, collected: false },
      { emoji: "üçá", name: "–í–∏–Ω–æ–≥—Ä–∞–¥", unlocked: false, collected: false },
      { emoji: "üçì", name: "–ö–ª—É–±–Ω–∏–∫–∞", unlocked: false, collected: false },
      { emoji: "ü´ê", name: "–ß–µ—Ä–Ω–∏–∫–∞", unlocked: false, collected: false },
      { emoji: "üçë", name: "–í–∏—à–Ω—è", unlocked: false, collected: false },
      { emoji: "üçí", name: "–ß–µ—Ä–µ—à–Ω—è", unlocked: false, collected: false },
      { emoji: "üçë", name: "–ü–µ—Ä—Å–∏–∫", unlocked: false, collected: false },
      { emoji: "ü•≠", name: "–ú–∞–Ω–≥–æ", unlocked: false, collected: false },
      { emoji: "üçç", name: "–ê–Ω–∞–Ω–∞—Å", unlocked: false, collected: false },
      { emoji: "ü•ù", name: "–ö–∏–≤–∏", unlocked: false, collected: false },
      { emoji: "üçà", name: "–î—ã–Ω—è", unlocked: false, collected: false },
      { emoji: "üçâ", name: "–ê—Ä–±—É–∑", unlocked: false, collected: false },
      { emoji: "üçê", name: "–ì—Ä—É—à–∞", unlocked: false, collected: false },
      { emoji: "ü••", name: "–ö–æ–∫–æ—Å", unlocked: false, collected: false },
      { emoji: "üçã", name: "–õ–∏–º–æ–Ω", unlocked: false, collected: false },
      { emoji: "üçÖ", name: "–ü–æ–º–∏–¥–æ—Ä", unlocked: false, collected: false },
      { emoji: "ü´í", name: "–û–ª–∏–≤–∞", unlocked: false, collected: false },
      { emoji: "ü•ë", name: "–ê–≤–æ–∫–∞–¥–æ", unlocked: false, collected: false },
      { emoji: "üçÜ", name: "–ë–∞–∫–ª–∞–∂–∞–Ω", unlocked: false, collected: false },
      { emoji: "ü•í", name: "–û–≥—É—Ä–µ—Ü", unlocked: false, collected: false },
      { emoji: "üå∂Ô∏è", name: "–ü–µ—Ä–µ—Ü", unlocked: false, collected: false },
      {
        emoji: "ü´ë",
        name: "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü",
        unlocked: false,
        collected: false,
      },
      { emoji: "ü•ï", name: "–ú–æ—Ä–∫–æ–≤—å", unlocked: false, collected: false },
      { emoji: "üåΩ", name: "–ö—É–∫—É—Ä—É–∑–∞", unlocked: false, collected: false },
      { emoji: "ü•î", name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", unlocked: false, collected: false },
      { emoji: "üç†", name: "–ë–∞—Ç–∞—Ç", unlocked: false, collected: false },
      { emoji: "ü•ú", name: "–ê—Ä–∞—Ö–∏—Å", unlocked: false, collected: false },
      { emoji: "üå∞", name: "–ö–∞—à—Ç–∞–Ω", unlocked: false, collected: false },
      { emoji: "üçÑ", name: "–ì—Ä–∏–±", unlocked: false, collected: false },
      { emoji: "üßÑ", name: "–ß–µ—Å–Ω–æ–∫", unlocked: false, collected: false },
      { emoji: "üßÖ", name: "–õ—É–∫", unlocked: false, collected: false },
      { emoji: "ü´ö", name: "–ò–º–±–∏—Ä—å", unlocked: false, collected: false },
      { emoji: "ü•ñ", name: "–•–ª–µ–±", unlocked: false, collected: false },
      { emoji: "üåæ", name: "–ü—à–µ–Ω–∏—Ü–∞", unlocked: false, collected: false },
      { emoji: "üåø", name: "–¢—Ä–∞–≤—ã", unlocked: false, collected: false },
      { emoji: "üçÉ", name: "–õ–∏—Å—Ç—å—è", unlocked: false, collected: false },
      { emoji: "üå±", name: "–†–æ—Å—Ç–æ–∫", unlocked: false, collected: false },
      { emoji: "üå≥", name: "–î–µ—Ä–µ–≤–æ", unlocked: false, collected: false },
      { emoji: "üéã", name: "–ë–∞–º–±—É–∫", unlocked: false, collected: false },
      { emoji: "üå¥", name: "–ü–∞–ª—å–º–∞", unlocked: false, collected: false },
      { emoji: "üå≤", name: "–ï–ª—å", unlocked: false, collected: false },
      { emoji: "üåµ", name: "–ö–∞–∫—Ç—É—Å", unlocked: false, collected: false },
      { emoji: "üèµÔ∏è", name: "–¶–≤–µ—Ç–æ–∫", unlocked: false, collected: false },
      { emoji: "üå∫", name: "–ì–∏–±–∏—Å–∫—É—Å", unlocked: false, collected: false },
      { emoji: "üåª", name: "–ü–æ–¥—Å–æ–ª–Ω—É—Ö", unlocked: false, collected: false },
      { emoji: "üå∑", name: "–¢—é–ª—å–ø–∞–Ω", unlocked: false, collected: false },
      { emoji: "üåπ", name: "–†–æ–∑–∞", unlocked: false, collected: false },
      { emoji: "üå∏", name: "–°–∞–∫—É—Ä–∞", unlocked: false, collected: false },
    ];

    this.init();
    this.bindEvents();
    this.createInventoryGrid();
  }

  async init() {
    document
      .getElementById("waterBtn")
      .addEventListener("click", () => this.waterPlant());
    document
      .getElementById("plant")
      .addEventListener("click", () => this.clickPlant());
    setInterval(() => this.generateWater(), 1000);
    if (this.telegramWebApp && this.telegramWebApp.initDataUnsafe.user) {
      this.telegramId = this.telegramWebApp.initDataUnsafe.user.id;
      await this.loadUserData();
    } else {
      console.error("Game is not running in Telegram Web App or user data is not available.");
      document.body.innerHTML = "<h2>Use Telegram Web App!</h2>";
      return;
    }
    this.updateUI();
  }

  bindEvents() {
    const inventoryBtn = document.getElementById("inventoryBtn");
    const backBtn = document.getElementById("backBtn");
    inventoryBtn?.addEventListener("click", (e) => {
      e.preventDefault();
      this.showInventory();
    });
    backBtn?.addEventListener("click", () => this.showGame());
  }

  showInventory() {
    this.currentPage = "inventory";
    document.getElementById("gameContainer").style.display = "none";
    document.getElementById("inventoryContainer").style.display = "flex";
    this.updateInventoryUI();
  }

  showGame() {
    this.currentPage = "game";
    document.getElementById("gameContainer").style.display = "flex";
    document.getElementById("inventoryContainer").style.display = "none";
  }

  createInventoryGrid() {
    const grid = document.getElementById("inventoryGrid");
    if (!grid) return;
    grid.innerHTML = "";

    this.fruits.forEach((fruit, index) => {
      const slot = document.createElement("div");
      slot.className = "fruit-slot";

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      if (fruit.collected) {
        slot.classList.add("collected");
        slot.classList.add("unlocked");
      } else if (fruit.unlocked) {
        slot.classList.add("unlocked");
      } else {
        slot.classList.add("locked");
      }

      slot.innerHTML = `
              <div class="fruit-number">${index + 1}</div>
              ${
                fruit.unlocked
                  ? `<div class="fruit-emoji">${fruit.emoji}</div>`
                  : '<div class="fruit-emoji">‚ùì</div>'
              }
              <div class="fruit-name">${
                fruit.unlocked ? fruit.name : "???"
              }</div>
              ${!fruit.unlocked ? '<div class="lock-icon">üîí</div>' : ""}
              ${fruit.collected ? '<div class="collected-badge">‚úì</div>' : ""}
          `;

      grid.appendChild(slot);
    });
  }

  updateInventoryUI() {
    const collectedCount = this.fruits.filter((f) => f.collected).length;
    const countEl = document.getElementById("inventoryCount");
    if (countEl) countEl.textContent = `${collectedCount}/50`;
    this.createInventoryGrid();
  }

  generateWater() {
    this.availableWater = Math.min(
      this.availableWater + this.waterPerSecond,
      this.maxWater
    );
    this.updateUI();
  }

  waterPlant() {
    if (this.availableWater >= this.waterPerClick) {
      this.availableWater -= this.waterPerClick;
      this.currentProgress++;
      this.checkStageUp();
      this.updateUI();
    }
  }

  clickPlant() {
    if (this.availableWater >= this.waterPerClick) {
      this.availableWater -= this.waterPerClick;
      this.currentProgress++;
      this.checkStageUp();
      this.updateUI();
    }
  }

  checkStageUp() {
    if (this.currentProgress >= this.maxProgress) {
      this.currentStage++;
      if (this.currentStage > this.maxStage) {
        // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω - —Å–æ–±–∏—Ä–∞–µ–º —Ñ—Ä—É–∫—Ç
        this.currentStage = 1;
        this.currentProgress = 0;
        this.maxProgress = this.stageThresholds[0];
        this.waterPerSecond = Math.floor(this.waterPerSecond * 1.2); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤–æ–¥—ã
        this.collectFruit();
        return;
      }
      this.currentProgress = 0;
      this.maxProgress = this.stageThresholds[this.currentStage - 1];
    }
  }

  collectFruit() {
    if (this.currentFruitIndex < this.fruits.length) {
      const fruit = this.fruits[this.currentFruitIndex];
      fruit.collected = true;
      fruit.unlocked = true;

      alert(`üåü –ù–æ–≤—ã–π —Ñ—Ä—É–∫—Ç —Å–æ–±—Ä–∞–Ω: ${fruit.name}!`);

      this.fruitsCollected++;
      this.currentFruitIndex++;

      if (this.currentFruitIndex < this.fruits.length) {
        this.fruits[this.currentFruitIndex].unlocked = true;
      }

      if (this.currentPage === "inventory") {
        this.updateInventoryUI();
      }
    }
  }

  updateUI() {
    if (this.currentPage === "inventory") this.updateInventoryUI();

    document.getElementById(
      "progressText"
    ).textContent = `${this.currentProgress} / ${this.maxProgress}`;

    const progressBar = document.getElementById("progressBar");
    const segments = 8;
    const filled = Math.floor(
      (this.currentProgress / this.maxProgress) * segments
    );
    progressBar.innerHTML = "";
    for (let i = 0; i < segments; i++) {
      const seg = document.createElement("div");
      seg.className = "progress-segment" + (i < filled ? "" : " empty");
      progressBar.appendChild(seg);
    }

    const stage = this.stages[this.currentStage - 1] || this.stages[0];
    document.getElementById("plantEmoji").textContent = stage.emoji;
    document.getElementById("plantName").textContent = `(${stage.name})`;
    document.getElementById(
      "stageText"
    ).textContent = `${stage.name} ${this.currentStage}/${this.maxStage}`;
    document.getElementById(
      "waterCount"
    ).textContent = `${this.availableWater} / ${this.maxWater}`;
    document.getElementById("fruitCount").textContent =
      this.fruitsCollected.toString();
  }
}

window.addEventListener("DOMContentLoaded", () => {
  window.game = new FrutopiaGame();
});
