class FrutopiaGame {
  constructor() {
    this.stageThresholds = [100, 500, 1000, 5000, 10000];
    this.currentStage = 1;
    this.currentProgress = 0;
    this.maxProgress = this.stageThresholds[this.currentStage - 1];
    this.availableWater = 0;
    this.waterPerSecond = 5;
    this.waterPerClick = 1;
    this.fruitsCollected = 0;
    this.maxStage = 5;
    this.currentFruitIndex = 0;
    this.maxWater = 10000;
    this.currentPage = "game";
    this.telegramId = null; 
    this.telegramWebApp = window.Telegram?.WebApp;

    this.stages = [
      { emoji: "üå∞", name: "–°–µ–º–µ—á–∫–∞" },
      { emoji: "üå±", name: "–†–æ—Å—Ç–æ–∫" },
      { emoji: "üåø", name: "–°–∞–∂–µ–Ω–µ—Ü" },
      { emoji: "üå≥", name: "–î–µ—Ä–µ–≤–æ" },
      { emoji: "üçé", name: "–ü–ª–æ–¥–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ" },
    ];

    this.fruits = [
      { emoji: "üçé", name: "–Ø–±–ª–æ–∫–æ", unlocked: false, collected: false },
      { emoji: "üçä", name: "–ê–ø–µ–ª—å—Å–∏–Ω", unlocked: false, collected: false },
      { emoji: "üçå", name: "–ë–∞–Ω–∞–Ω", unlocked: false, collected: false },
      { emoji: "üçá", name: "–í–∏–Ω–æ–≥—Ä–∞–¥", unlocked: false, collected: false },
      { emoji: "üçì", name: "–ö–ª—É–±–Ω–∏–∫–∞", unlocked: false, collected: false },
      { emoji: "ü´ê", name: "–ß–µ—Ä–Ω–∏–∫–∞", unlocked: false, collected: false },
      { emoji: "üçë", name: "–í–∏—à–Ω—è", unlocked: false, collected: false },
      { emoji: "üçí", name: "–ß–µ—Ä–µ—à–Ω—è", unlocked: false, collected: false },
      { emoji: "üçë", name: "–ü–µ—Ä—Å–∏–∫", unlocked: false, collected: false },
      { emoji: "ü•≠", name: "–ú–∞–Ω–≥–æ", unlocked: false, collected: false },
      { emoji: "üçç", name: "–ê–Ω–∞–Ω–∞—Å", unlocked: false, collected: false },
      { emoji: "ü•ù", name: "–ö–∏–≤–∏", unlocked: false, collected: false },
      { emoji: "üçà", name: "–î—ã–Ω—è", unlocked: false, collected: false },
      { emoji: "üçâ", name: "–ê—Ä–±—É–∑", unlocked: false, collected: false },
      { emoji: "üçê", name: "–ì—Ä—É—à–∞", unlocked: false, collected: false },
      { emoji: "ü••", name: "–ö–æ–∫–æ—Å", unlocked: false, collected: false },
      { emoji: "üçã", name: "–õ–∏–º–æ–Ω", unlocked: false, collected: false },
      { emoji: "üçÖ", name: "–ü–æ–º–∏–¥–æ—Ä", unlocked: false, collected: false },
      { emoji: "ü´í", name: "–û–ª–∏–≤–∞", unlocked: false, collected: false },
      { emoji: "ü•ë", name: "–ê–≤–æ–∫–∞–¥–æ", unlocked: false, collected: false },
      { emoji: "üçÜ", name: "–ë–∞–∫–ª–∞–∂–∞–Ω", unlocked: false, collected: false },
      { emoji: "ü•í", name: "–û–≥—É—Ä–µ—Ü", unlocked: false, collected: false },
      { emoji: "üå∂Ô∏è", name: "–ü–µ—Ä–µ—Ü", unlocked: false, collected: false },
      {
        emoji: "ü´ë",
        name: "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü",
        unlocked: false,
        collected: false,
      },
      { emoji: "ü•ï", name: "–ú–æ—Ä–∫–æ–≤—å", unlocked: false, collected: false },
      { emoji: "üåΩ", name: "–ö—É–∫—É—Ä—É–∑–∞", unlocked: false, collected: false },
      { emoji: "ü•î", name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", unlocked: false, collected: false },
      { emoji: "üç†", name: "–ë–∞—Ç–∞—Ç", unlocked: false, collected: false },
      { emoji: "ü•ú", name: "–ê—Ä–∞—Ö–∏—Å", unlocked: false, collected: false },
      { emoji: "üå∞", name: "–ö–∞—à—Ç–∞–Ω", unlocked: false, collected: false },
      { emoji: "üçÑ", name: "–ì—Ä–∏–±", unlocked: false, collected: false },
      { emoji: "üßÑ", name: "–ß–µ—Å–Ω–æ–∫", unlocked: false, collected: false },
      { emoji: "üßÖ", name: "–õ—É–∫", unlocked: false, collected: false },
      { emoji: "ü´ö", name: "–ò–º–±–∏—Ä—å", unlocked: false, collected: false },
      { emoji: "ü•ñ", name: "–•–ª–µ–±", unlocked: false, collected: false },
      { emoji: "üåæ", name: "–ü—à–µ–Ω–∏—Ü–∞", unlocked: false, collected: false },
      { emoji: "üåø", name: "–¢—Ä–∞–≤—ã", unlocked: false, collected: false },
      { emoji: "üçÉ", name: "–õ–∏—Å—Ç—å—è", unlocked: false, collected: false },
      { emoji: "üå±", name: "–†–æ—Å—Ç–æ–∫", unlocked: false, collected: false },
      { emoji: "üå≥", name: "–î–µ—Ä–µ–≤–æ", unlocked: false, collected: false },
      { emoji: "üéã", name: "–ë–∞–º–±—É–∫", unlocked: false, collected: false },
      { emoji: "üå¥", name: "–ü–∞–ª—å–º–∞", unlocked: false, collected: false },
      { emoji: "üå≤", name: "–ï–ª—å", unlocked: false, collected: false },
      { emoji: "üåµ", name: "–ö–∞–∫—Ç—É—Å", unlocked: false, collected: false },
      { emoji: "üèµÔ∏è", name: "–¶–≤–µ—Ç–æ–∫", unlocked: false, collected: false },
      { emoji: "üå∫", name: "–ì–∏–±–∏—Å–∫—É—Å", unlocked: false, collected: false },
      { emoji: "üåª", name: "–ü–æ–¥—Å–æ–ª–Ω—É—Ö", unlocked: false, collected: false },
      { emoji: "üå∑", name: "–¢—é–ª—å–ø–∞–Ω", unlocked: false, collected: false },
      { emoji: "üåπ", name: "–†–æ–∑–∞", unlocked: false, collected: false },
      { emoji: "üå∏", name: "–°–∞–∫—É—Ä–∞", unlocked: false, collected: false },
    ];

    this.init();
    this.bindEvents();
    this.createInventoryGrid();
    
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    window.addEventListener('beforeunload', () => {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        this.saveUserData();
    });
  }

  async init() {
    if (this.telegramWebApp && this.telegramWebApp.initDataUnsafe.user) {
      this.telegramId = this.telegramWebApp.initDataUnsafe.user.id;
      // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è –∑ –±–µ–∫–µ–Ω–¥–∞, –ø–µ—Ä—à –Ω—ñ–∂ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ UI
      await this.loadUserData();
    } else {
      this.displayMessage("Use Telegram Web App.");
      console.error("Game is not running in Telegram Web App or user data is not available.");
      return;
    }

    document.getElementById("waterBtn").addEventListener("click", () => this.waterPlant());
    document.getElementById("plant").addEventListener("click", () => this.clickPlant());
    setInterval(() => this.generateWater(), 1000);
    this.updateUI();
  }

  async loadUserData() {
    try {
      const response = await fetch(`/api/user/${this.telegramId}`);
      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }
      const userData = await response.json();
      if (userData) {
        this.currentProgress = userData.progress;
        this.currentStage = userData.current_stage;
        this.availableWater = userData.available_water;
        this.maxProgress = this.stageThresholds[this.currentStage - 1];
        if (userData.fruits) {
            this.fruits = userData.fruits;
            this.fruitsCollected = this.fruits.filter(f => f.collected).length;
            this.currentFruitIndex = this.fruits.findIndex(f => !f.unlocked) || this.fruits.length;
        }
      }
    } catch (error) {
      console.error("Failed to load user data:", error);
    }
  }

  saveUserData() {
    const data = {
      progress: this.currentProgress,
      current_stage: this.currentStage,
      available_water: this.availableWater,
      fruits: this.fruits
    };
    
    navigator.sendBeacon(`/api/user/${this.telegramId}`, JSON.stringify(data));
  }

  bindEvents() {
    const inventoryBtn = document.getElementById("inventoryBtn");
    const backBtn = document.getElementById("backBtn");
    inventoryBtn?.addEventListener("click", (e) => {
      e.preventDefault();
      this.showInventory();
    });
    backBtn?.addEventListener("click", () => this.showGame());
  }

  showInventory() {
    this.currentPage = "inventory";
    document.getElementById("gameContainer").style.display = "none";
    document.getElementById("inventoryContainer").style.display = "flex";
    this.updateInventoryUI();
  }

  showGame() {
    this.currentPage = "game";
    document.getElementById("gameContainer").style.display = "flex";
    document.getElementById("inventoryContainer").style.display = "none";
  }

  createInventoryGrid() {
    const grid = document.getElementById("inventoryGrid");
    if (!grid) return;
    grid.innerHTML = "";

    this.fruits.forEach((fruit, index) => {
      const slot = document.createElement("div");
      slot.className = "fruit-slot";

      if (fruit.collected) {
        slot.classList.add("collected");
        slot.classList.add("unlocked");
      } else if (fruit.unlocked) {
        slot.classList.add("unlocked");
      } else {
        slot.classList.add("locked");
      }

      slot.innerHTML = `
              <div class="fruit-number">${index + 1}</div>
              ${
                fruit.unlocked
                  ? `<div class="fruit-emoji">${fruit.emoji}</div>`
                  : '<div class="fruit-emoji">‚ùì</div>'
              }
              <div class="fruit-name">${
                fruit.unlocked ? fruit.name : "???"
              }</div>
              ${!fruit.unlocked ? '<div class="lock-icon">üîí</div>' : ""}
              ${fruit.collected ? '<div class="collected-badge">‚úì</div>' : ""}
          `;
      grid.appendChild(slot);
    });
  }

  updateInventoryUI() {
    const collectedCount = this.fruits.filter((f) => f.collected).length;
    const countEl = document.getElementById("inventoryCount");
    if (countEl) countEl.textContent = `${collectedCount}/${this.fruits.length}`;
    this.createInventoryGrid();
  }

  generateWater() {
    this.availableWater = Math.min(
      this.availableWater + this.waterPerSecond,
      this.maxWater
    );
    this.updateUI();
  }

  waterPlant() {
    if (this.availableWater >= this.waterPerClick) {
      this.availableWater -= this.waterPerClick;
      this.currentProgress++;
      this.checkStageUp();
      this.updateUI();
      this.saveUserData();
    }
  }

  clickPlant() {
    if (this.availableWater >= this.waterPerClick) {
      this.availableWater -= this.waterPerClick;
      this.currentProgress++;
      this.checkStageUp();
      this.updateUI();
      this.saveUserData();
    }
  }

  checkStageUp() {
    if (this.currentProgress >= this.maxProgress) {
      this.currentStage++;
      if (this.currentStage > this.maxStage) {
        this.currentStage = 1;
        this.currentProgress = 0;
        this.maxProgress = this.stageThresholds[0];
        this.waterPerSecond = Math.floor(this.waterPerSecond * 1.2);
        this.collectFruit();
        return;
      }
      this.currentProgress = 0;
      this.maxProgress = this.stageThresholds[this.currentStage - 1];
    }
  }

  collectFruit() {
    if (this.currentFruitIndex < this.fruits.length) {
      const fruit = this.fruits[this.currentFruitIndex];
      fruit.collected = true;
      fruit.unlocked = true;

      this.displayMessage(`üåü –ù–æ–≤–∏–π —Ñ—Ä—É–∫—Ç –∑—ñ–±—Ä–∞–Ω–æ: ${fruit.name}!`);

      this.fruitsCollected++;
      this.currentFruitIndex++;

      if (this.currentFruitIndex < this.fruits.length) {
        this.fruits[this.currentFruitIndex].unlocked = true;
      }

      if (this.currentPage === "inventory") {
        this.updateInventoryUI();
      }
    }
  }

  displayMessage(message) {
    const messageBox = document.getElementById("messageBox");
    const messageText = document.getElementById("messageText");
    if (messageBox && messageText) {
      messageText.textContent = message;
      messageBox.style.display = "block";
      setTimeout(() => {
        messageBox.style.display = "none";
      }, 3000);
    } else {
        console.warn("Message box elements not found. Message: " + message);
    }
  }
}

window.addEventListener("DOMContentLoaded", () => {
  window.game = new FrutopiaGame();
});
